#!/usr/bin/env node

const appQ = require('../app')();
const logger = require('../util/logger');
const debug = require('debug')('server:server');
const http = require('http');
const seeder = require('../database/seed');
const yargs = require('yargs');

const init = async (seed) => {
  /**
   * Get port from environment and store in Express.
   */
  const port = normalizePort(process.env.PORT || '3000');
  const app = await appQ;
  const server = http.createServer(app);

  /**
   * Create HTTP server.
   */
  server.on('error', onError);
  server.on('listening', onListening);
  process.on('unhandledRejection', (reason, p) => {
    logger.error('Unhandled Rejection at: Promise', p, 'reason:', reason);
  });

  // Run migrations if passed down
  if (seed) {
    await seeder(app.locals.bookshelf);
  }

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  app.set('port', port);

  return Promise.resolve(server);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    const localPort = parseInt(val, 10);

    if (isNaN(localPort)) {
      // named pipe
      return val;
    }

    if (localPort >= 0) {
      // port number
      return localPort;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        logger.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        logger.error(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
  }
};

if (require.main === module) {
  const argv = yargs.argv;
  init(argv.seed);
} else {
  module.exports = init;
}
